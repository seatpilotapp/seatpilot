import type {
  Assignment,
  AssignmentExplanation,
  Guest,
  Seat,
  ExplanationReason
} from '../types.js';

interface ExplainInput {
  guests: Guest[];
  seats: Seat[];
  assignments: Assignment[];
}

const vipBonusReason = (
  guest: Guest,
  seat: Seat | undefined
): ExplanationReason | undefined => {
  if (!guest.vip || !seat) return undefined;
  if (!seat.attrs?.includes('near_stage')) return undefined;

  return {
    rule: 'vip_near_stage',
    delta: +0.15,
    message: `VIP guest ${guest.id} seated near stage at ${seat.id}.`
  };
};

export const buildExplanations = ({
  guests,
  seats,
  assignments
}: ExplainInput): AssignmentExplanation[] => {
  const seatById = new Map(seats.map((seat) => [seat.id, seat]));
  const guestById = new Map(guests.map((guest) => [guest.id, guest]));

  return assignments.map((assignment) => {
    const guest = guestById.get(assignment.guestId);
    const seat = seatById.get(assignment.seatId);

    const reasons: ExplanationReason[] = [];
    const vipReason = guest && vipBonusReason(guest, seat);
    if (vipReason) {
      reasons.push(vipReason);
    }

    if (reasons.length === 0) {
      reasons.push({
        rule: 'baseline_match',
        delta: 0,
        message: 'Assignment generated by default heuristic.'
      });
    }

    return {
      guestId: assignment.guestId,
      seatId: assignment.seatId,
      reasons
    };
  });
};
